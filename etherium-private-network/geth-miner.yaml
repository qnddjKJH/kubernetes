apiVersion: v1
kind: ConfigMap
metadata:
  name: eth-geth
  namespace: eth-project
  labels:
    app: eth-geth
data:
  networkid: "9596240610"
  genesis.json: |
    {
      "config": {
        "chainId": 9596240610,
        "homesteadBlock": 0,
        "eip150Block": 0,
        "eip155Block": 0,
        "eip158Block": 0
      },
      "difficulty": "0x400",
      "gasLimit": "2000000",
      "nonce": "0x0000000000000000",
      "alloc": {
        "0x0E2Ac28B62681076cB2bc36cb891be3447798113": {
          "balance": "100000000000000000000"
        },
        "0x77c8c4Dce82a7B004B5f532c166ccC5945c61e6F": {
          "balance": "200000000000000000000"
        },
        "0x6530C6B52f42306966A7a91952c6A84a2bEE737D": {
          "balance": "300000000000000000000"
        }
      }
    }
---

apiVersion: v1
kind: Secret
metadata:
  name: eth-geth-miner
  namespace: eth-project
  labels:
    app: eth-geth-miner
type: Opaque
data:
  accountsecret: "Yml0dG9Qcm9qZWN0"
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: eth-geth-miner
  namespace: eth-project
  labels:
    app: eth-geth-miner
spec:
  selector:
    matchLabels:
      app: eth-geth-miner
  replicas: 3
  revisionHistoryLimit: 1
  template:
    metadata:
      labels:
        app: eth-geth-miner
    spec:
      containers:
      - name: geth-miner
        image: ethereum/client-go:alltools-v1.11.6
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu: ".25"
            memory: 250Mi
          limits:
            cpu: ".5"
            memory: 500Mi
        command: ["/bin/sh"]
        args:
        - "-c"
        - "geth --bootnodes=`cat /root/.ethereum/bootnodes` --mine --networkid=${NETWORK_ID} --ethstats=${HOSTNAME}:${ETHSTATS_SECRET}@${ETHSTATS_SVC} --verbosity=4"
        env:
        - name: ETHSTATS_SVC
          value: eth-ethstats.dcp
        - name: ETHSTATS_SECRET
          valueFrom:
            secretKeyRef:
              name: eth-ethstats
              key: WS_SECRET
        - name: NETWORK_ID
          valueFrom:
            configMapKeyRef:
              name: eth-geth
              key: networkid
        ports:
        - name: discovery-udp
          containerPort: 30303
          protocol: UDP
        - name: discovery-tcp
          containerPort: 30303
        volumeMounts:
        - name: data
          mountPath: /root/.ethereum
      initContainers:
      - name: init-genesis
        image: ethereum/client-go:alltools-v1.11.6
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args:
        - "-c"
        - "geth init /var/geth/genesis.json"
        volumeMounts:
        - name: data
          mountPath: /root/.ethereum
        - name: config
          mountPath: /var/geth
      - name: create-account
        image: ethereum/client-go:alltools-v1.11.6
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args:
        - "-c"
        - "printf '$(ACCOUNT_SECRET)\n$(ACCOUNT_SECRET)\n' | geth account new"
        env:
        - name: ACCOUNT_SECRET
          valueFrom:
            secretKeyRef:
              name: eth-geth-miner
              key: accountsecret
        volumeMounts:
        - name: data
          mountPath: /root/.ethereum
      - name: get-bootnodes
        image: ethereum/client-go:alltools-v1.11.6
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args:
        - "-c"
        - "apk add --no-cache curl; \nCNT=0; \necho \"retrieving bootnodes from $(BOOTNODE_REGISTRAR_SVC)\"; \nwhile [ $CNT -le 90 ]; do \n  curl -m 5 -s $(BOOTNODE_REGISTRAR_SVC):8080 | xargs echo -n >> /geth/bootnodes; \n  if [ -s /geth/bootnodes ]; then \n    cat /geth/bootnodes; \n    exit 0; \n  fi; \n  echo \"no bootnodes found. retrying $CNT...\"; \n  sleep 2 || break; \n  CNT=$((CNT+1)); \ndone; \necho \"WARNING. unable to find bootnodes. continuing but geth may not be able to find any peers.\"; \nexit 0;\n"
        env:
        - name: BOOTNODE_REGISTRAR_SVC
          value: eth-bootnode.eth-project.svc.cluster.local
        volumeMounts:
        - name: data
          mountPath: /geth
      volumes:
      - name: data
        emptyDir: {}
      - name: config
        configMap:
          name: eth-geth
