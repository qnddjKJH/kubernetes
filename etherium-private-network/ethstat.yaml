apiVersion: v1
kind: Service
metadata:
  name: eth-ethstats
  namespace: eth-project
spec:
  selector:
    app: eth-ethstats
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: 3000
---
# https://kubernetes.io/docs/concepts/services-networking/ingress/#the-ingress-resource

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: eth-ethstats
  namespace: eth-project
spec:
  ingressClassName: nginx
  rules:
  - host: eth.bitto.project
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: eth-ethstats
            port:
              number: 80

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: eth-ethstats
  namespace: eth-project
  labels:
    app: eth-ethstats
spec:
  selector:
    matchLabels:
      app: eth-ethstats
  replicas: 1
  template:
    metadata:
      labels:
        app: eth-ethstats
    spec:
      # initContainers:
      # Init containers are exactly like regular containers, except:
      # - Init containers always run to completion.
      # - Each init container must complete successfully before the next one starts.
      containers:
      - name: eth-ethstats
        image: ethereumex/eth-stats-dashboard:latest
        imagePullPolicy: IfNotPresent
        env:
        - name: WS_SECRET
          valueFrom:
            secretKeyRef:
              name: eth-ethstats
              key: WS_SECRET
        command: ["/bin/sh", "-c"]
        args:
        - WS_SECRET=$(WS_SECRET) npm start
        ports:
        - name: http
          containerPort: 3000
---
apiVersion: v1
kind: Secret
metadata:
  name: eth-ethstats
  namespace: eth-project
  labels:
    app: eth-ethstats
type: Opaque
data:
  WS_SECRET: "Yml0dG9Qcm9qZWN0"
